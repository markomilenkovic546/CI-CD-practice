name: dev pipeline

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'The hash of the commit that triggered the workflow'
        required: true
      branch_name:
        description: 'The name of the branch that triggered the workflow'
        required: true
        
concurrency: 1      

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
           npm install -g pnpm
           pnpm install
        working-directory: ./server  

      - name: Run Jest tests
        id: jest-tests
        run: |
          pnpm test
          echo "exit-code=${?}" >> $GITHUB_ENV
        working-directory: ./server 
        continue-on-error: false

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Trigger Deploy
        id: trigger-deploy
        run: |
          deploy_response=$(curl -sS -X GET "${{ secrets.RENDER_DEPLOY_HOOK_URL_CLIENT_DEV }}")
          deploy_id=$(echo "$deploy_response" | jq -r '.deploy.id')
          echo "deploy-id=$deploy_id" >> $GITHUB_ENV

          deploy_response_server=$(curl -sS -X GET "${{ secrets.RENDER_DEPLOY_HOOK_URL_SERVER_DEV }}")
          deploy_server_id=$(echo "$deploy_response_server" | jq -r '.deploy.id')
          echo "deploy-server_id=$deploy_server_id" >> $GITHUB_ENV
      - name: Poll Deploy Status
        id: poll-deploy-status
        run: |
          client_status="pending"
          server_status="pending"
          while [ "$client_status" != "live" ] || [ "$server_status" != "live" ]; do
            client_deploy_response=$(curl -sS -X GET "https://api.render.com/v1/services/${{ secrets.RENDER_CLIENT_ID_DEV }}/deploys/${{ env.deploy-id }}" -H "Authorization: Bearer ${{ secrets.API_KEY }}")
            client_status=$(echo "$client_deploy_response" | jq -r '.status')
            server_deploy_response=$(curl -sS -X GET "https://api.render.com/v1/services/${{ secrets.RENDER_SERVER_ID_DEV }}/deploys/${{ env.deploy-server_id }}" -H "Authorization: Bearer ${{ secrets.API_KEY }}")
            server_status=$(echo "$server_deploy_response" | jq -r '.status')
            echo "Client Deploy Status: $client_status"
            echo "Server Deploy Status: $server_status"
            if [ "$client_status" = "failed" ] && [ "$server_status" = "failed" ]; then
              echo "Both deployments failed."
              exit 1
            elif [ "$client_status" = "failed" ]; then
              echo "Client deployment failed."
              exit 1
            elif [ "$server_status" = "failed" ]; then
              echo "Server deployment failed."
              exit 1
            else
              sleep 8s
            fi
          done
          

